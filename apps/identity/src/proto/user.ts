// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.7
//   protoc               v5.28.2
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";
import { Empty } from "./google/protobuf/empty";

export const protobufPackage = "identity";

export interface GeoIP {
  cityName: string;
  continentCode: string;
  countryCode3: string;
  countryCode: string;
  countryName: string;
  latitude: number;
  longitude: number;
  subdivisionCode: string;
  subdivisionName: string;
  timeZone: string;
}

export interface Request {
  geoip: GeoIP | undefined;
  hostname: string;
  ip: string;
  language: string;
  method: string;
  userAgent: string;
}

export interface Connection {
  id: string;
  metadata: { [key: string]: string };
  name: string;
  strategy: string;
}

export interface Connection_MetadataEntry {
  key: string;
  value: string;
}

export interface Tenant {
  id: string;
}

export interface Transaction {
  acrValues: string[];
  id: string;
  locale: string;
  protocol: string;
  requestedScopes: string[];
  uiLocales: string[];
}

export interface User {
  email: string;
  tenant: string;
  userId: string;
  appMetadata: { [key: string]: string };
  userMetadata: { [key: string]: string };
  emailVerified: boolean;
  phoneVerified: boolean;
}

export interface User_AppMetadataEntry {
  key: string;
  value: string;
}

export interface User_UserMetadataEntry {
  key: string;
  value: string;
}

export interface Payload {
  request: Request | undefined;
  connection: Connection | undefined;
  tenant: Tenant | undefined;
  transaction: Transaction | undefined;
  user: User | undefined;
  configuration: { [key: string]: string };
  secrets: { [key: string]: string };
}

export interface Payload_ConfigurationEntry {
  key: string;
  value: string;
}

export interface Payload_SecretsEntry {
  key: string;
  value: string;
}

export const IDENTITY_PACKAGE_NAME = "identity";

export interface UserServiceClient {
  storeUser(request: Payload): Observable<Empty>;
}

export interface UserServiceController {
  storeUser(request: Payload): void;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["storeUser"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
